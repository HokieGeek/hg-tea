image: node:10-alpine

stages:
    - build
    - test
    - release
    - deploy

.installChromium: &installChromium |
    apk update && apk upgrade &&
    echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories &&
    echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories &&
    apk add --no-cache chromium@edge nss@edge

variables:
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    CHROME_BIN: "/usr/bin/chromium-browser"

cache:
  paths:
    - node_modules/
    - dist/

build-app:
  stage: build
  script:
    - npm install
    - npm run build

## Linting
lint:
  stage: build
  script:
    - npm run lint
  only:
    - tags

lint-warn:
  stage: build
  script:
    - npm run lint
  except:
    - tags
  allow_failure: true

## Unit testing
.node-unit-test: &node-unit-test
  stage: test
  before_script:
    - *installChromium
  script:
    - npm run test
  retry: 2
      # coverage: /TODO/

unit-node:8:
  <<: *node-unit-test
  image: node:8-alpine

unit-node:9:
  <<: *node-unit-test
  image: node:9-alpine

unit-node:10:
  <<: *node-unit-test

unit-node:latest:
  <<: *node-unit-test
  image: node:alpine
  allow_failure: true

## Lifecycle Evaluation
.lifecycle-evaluation: &lifecycle-evaluation
  stage: test
  image: registry.gitlab.com/sonatype-nexus-community/nexus-lifecycle-gitlab:latest
  script:
    - evaluate
  after_script:
    - gitlab --no-issues
  allow_failure: true

evaluate-build:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: build
  only:
    - branches

evaluate-stage:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: stage-release
  only:
    - master

evaluate-release:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: release
  only:
    - tags

## Create container
.build-docker-image: &build-docker-image
  stage: release
  image: docker:git
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

create-container-dev:
  <<: *build-docker-image
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:SNAPSHOT
  except:
    - tags

create-container:
  <<: *build-docker-image
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  after_script:
    - docker tag $IMAGE_TAG $IMAGE_LATEST_TAG
    - docker push $IMAGE_LATEST_TAG
  only:
    - tags
  except:
    - branches

## Service restarter
.service-restarter: &service-restarter
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --update --no-cache openssh
      # - echo $DO_SSH_KEY | sed -e 's/ /\n/g' | sed -r -e '1,4{:a;N;4!ba;s/\n/ /g}' -e '/^-{5}END/,${:z;N;$!bz;s/\n/ /g}' > /tmp/dokey
    - echo $DO_SSH_KEY | sed -e 's/ /\n/g' | sed -r -e '1,4{:a;N;4!ba;s/\n/ /g}' | sed -r -e '/^-{5}END/,${:z;N;$!bz;s/\n/ /g}' > /tmp/dokey
    - chmod 0600 /tmp/dokey
  script:
      # - cat /tmp/dokey
    - ssh -i /tmp/dokey -o StrictHostKeyChecking=no $DO_USERNAME@hokiegeek.net "sudo systemctl restart $SERVICE"

restart-service-dev:
  <<: *service-restarter
  variables:
    SERVICE: hgtea.service
  environment:
    name: staging
  only:
    - branches

.restart-service:
  <<: *service-restarter
  variables:
    SERVICE: hgtea.service
  environment:
    name: production
    url: http://hokiegeek.net/tea
  except:
    - branches
  only:
    - tags
