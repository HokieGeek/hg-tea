image: node:11-alpine

stages:
    - build
    - test
    - release
    - deploy

variables:
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    CHROME_BIN: "/usr/bin/chromium-browser"

cache:
  paths:
    - node_modules/
    - dist/

.build-template: &build-template
  stage: build
  before_script:
    - npm install
  script:
    - npm run ng -- build --base-href .
  after_script:
    - version=$(awk 'BEGIN { FS=":"; RS="," } $1 ~ /"version"/ { gsub(/( |")/, "", $0); print $2 }' package.json)
    - sed -i '/^<head>$/ a\    <meta name="application-name" content="hokiegeek.net_tea" data-version="'${version}${version_suffix:+":${version_suffix}"}'" />' dist/index.html
    - head dist/index.html

.build-snapshot:
  <<: *build-template
  variables:
    version_suffix: "SNAPSHOT"
  only:
    - master
  except:
    - tags

build-branch:
  <<: *build-template
  variables:
    version_suffix: $CI_COMMIT_REF_NAME
  only:
    - branches
  except:
    - master

build-release:
  <<: *build-template
  script:
    - npm run build # Run optimized build
  only:
    - tags

## Linting
.lint-template: &lint-template
  stage: build
  script:
    - npm install
    - npm run lint
  retry: 1

lint:
  <<: *lint-template
  only:
    - tags

lint-warn:
  <<: *lint-template
  except:
    - master
    - tags
  allow_failure: true

## Unit testing
.node-unit-test: &node-unit-test
  stage: test
  before_script:
    - apk update && apk upgrade
    - echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories
    - echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories
    - apk add --no-cache nodejs@edge npm@edge
    - apk add --no-cache chromium@edge harfbuzz@edge nss@edge ttf-freefont@edge
  script:
    - npm run test
  only:
    - branches
    - tags
  except:
    - master
  retry: 2
      # coverage: /TODO/

unit-node:11:
  <<: *node-unit-test
  allow_failure: true

unit-node:latest:
  <<: *node-unit-test
  # image: node:alpine
  image: alpine:edge
  # allow_failure: true

## Lifecycle Evaluation
.lifecycle-evaluation: &lifecycle-evaluation
  stage: test
  image: registry.gitlab.com/sonatype-nexus-community/nexus-lifecycle-gitlab:latest
  script:
    - evaluate
  after_script:
    - gitlab --no-issues
  retry: 1
  allow_failure: true

.evaluate-build:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: build
  only:
    - branches
  except:
    - master

.evaluate-stage:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: stage-release
  only:
    - master

.evaluate-release:
  <<: *lifecycle-evaluation
  variables:
    IQ_STAGE: release
  only:
    - tags

dependency_scanning:
  stage: test
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json

## Create container
.build-docker-image: &build-docker-image
  stage: release
  image: docker:git
  services:
    - docker:dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - head dist/index.html
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  retry: 1

create-container-dev:
  <<: *build-docker-image
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:SNAPSHOT
  except:
    - tags
    - master

create-container:
  <<: *build-docker-image
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE:latest
  after_script:
    - docker tag $IMAGE_TAG $IMAGE_LATEST_TAG
    - docker push $IMAGE_LATEST_TAG
  only:
    - tags
  except:
    - branches

deploy-and-restart:
  stage: deploy
  image: alpine:edge
  variables:
    IMAGE_LATEST_TAG: $CI_REGISTRY_IMAGE:latest
    ANSIBLE_CONFIG: prod-conf/ansible.cfg
  before_script:
    - apk update && apk upgrade
    - apk add --no-cache ansible
  script:
    - cd ./prod-conf
    - ansible-playbook -i ${DEPLOY_HOST}, -u ${ADMIN_USER} -e image=${IMAGE_LATEST_TAG} ./ansible.yml
